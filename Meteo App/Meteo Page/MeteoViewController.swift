//
//  MeteoViewController.swift
//  Meteo App
//
//  Created by Yakoubi Mohammed on 25/8/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MeteoDisplayLogic: class
{
    func displayError(error: Error)
    func displayMeteoData(viewModel: Meteo)
}

class MeteoViewController: UIViewController, MeteoDisplayLogic
{
    
  var interactor: MeteoBusinessLogic?
  var router: (NSObjectProtocol & MeteoRoutingLogic & MeteoDataPassing)?

  // MARK: Object lifecycle
  
    @IBOutlet weak var TitleLabel: UILabel!
    
    @IBOutlet weak var tableView: UITableView!
    
    @IBOutlet weak var statusLabel: UILabel!
    
    @IBOutlet weak var progressBar: UIProgressView!
    
    @IBOutlet weak var progressLabel: UILabel!
    
    @IBOutlet weak var RetryButton: UIButton!
    
    @IBOutlet weak var backButton: UIButton!
    let arrayText = ["Nous téléchargeons les données…"," C’est presque fini…","Plus que quelques secondes avant d’avoir le résultat…"]
    let citiesArray = ["Rennes","Paris","Nantes","Bordeaux","Lyon"]
    var compteArray = 0
    var timerProgress = Timer()
    var timerData = Timer()
    var compteCitieTimes = 1
    var dataCities: [Meteo] = []
     override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MeteoInteractor()
    let presenter = MeteoPresenter()
    let router = MeteoRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
      
      startProgress()
      Timer.scheduledTimer(timeInterval: 6, target: self, selector: #selector(changeTextFunction), userInfo: nil, repeats: true)
      
      
    
  }
    func startProgress() {
        progressBar.progress = 0.0
        self.interactor?.getMeteoData(localName: citiesArray[0])
        progressLabel.text = "0%"
        timerProgress = Timer.scheduledTimer(timeInterval: 0.6, target: self, selector: #selector(updateProgressBarFunction), userInfo: nil, repeats: true)
        timerData = Timer.scheduledTimer(timeInterval: 10, target: self, selector: #selector(updateDataCitiesFunction), userInfo: nil, repeats: true)
        
    }
    
    @objc func updateProgressBarFunction(){
        progressBar.progress += 1/100
        progressLabel.text = Int((progressBar.progress * 100)).description + "%"
        if progressBar.progress == 1 {
            timerProgress.invalidate()
            progressBar.isHidden = true
            progressLabel.isHidden = true
            statusLabel.isHidden = true
            RetryButton.isHidden = false
            tableView.reloadData()
        }
         
    }
    @objc func updateDataCitiesFunction(){
        
            self.interactor?.getMeteoData(localName: citiesArray[compteCitieTimes])
        compteCitieTimes += 1
        if compteCitieTimes == citiesArray.count {
            timerData.invalidate()
        }
    }
    @objc func changeTextFunction() {
        
        statusLabel.text = arrayText[compteArray]
        compteArray += 1
        if compteArray == arrayText.count {
            compteArray = 0
        }
    }
  
  // MARK: Do something
    func displayError(error: Error) {
        print(error)
    }
    
    func displayMeteoData(viewModel: Meteo) {
       
        dataCities.append(viewModel)
          
    }
    
  
  
    @IBAction func RetryAction(_ sender: Any) {
        startProgress()
        dataCities = []
        tableView.reloadData()
        compteArray = 0
        compteCitieTimes = 1
        progressBar.isHidden = false
        progressLabel.isHidden = false
        statusLabel.isHidden = false
        RetryButton.isHidden = true
    }
    @IBAction func backAction(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
}

extension MeteoViewController : UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = (tableView.dequeueReusableCell(withIdentifier: "MeteoTableViewCell", for:indexPath) as? MeteoTableViewCell?)!
        cell?.tempLabel.text = String(dataCities[indexPath.row].main?.temp ?? 0.0) + "°C"
        cell?.lowTempLabel.text = "L: " + String(dataCities[indexPath.row].main?.temp_min ?? 0.0) + "°C"
        cell?.hightTempLabel.text = "H: " + String(dataCities[indexPath.row].main?.temp_max ?? 0.0) + "°C"
        cell?.citieLabel.text = dataCities[indexPath.row].name
        return cell!
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataCities.count
    }
    
    
}
